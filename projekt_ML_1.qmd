---
title: "projekt_ML_1"
author: "Szymon Maślanka"
format:
  html:
    self-contained: true
    embed-resources: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme:
        light: cosmo
        dark: darkly
    fontsize: 1.0em
    linestretch: 1.5
execute:
  warning: false
  echo: true
  error: false
editor_options: 
  chunk_output_type: console
bibliography: references.bib
    
---

library(tidymodels)
library(parsnip)

# Helper packages
library(readr)       # import danych
library(broom.mixed) # konwersja 
library(dotwhisker)  # wizualizacja

## Ćwiczenie

urchins <-
  read_csv("https://tidymodels.org/start/models/urchins.csv") %>% 
  setNames(c("food_regime", "initial_volume", "width")) %>% 
  mutate(food_regime = factor(food_regime, 
                              levels = c("Initial", "Low", "High")))

urchins
urchins |> is.na() |> as_tibble() |> summarise_all(sum)

urchins %>%
  ggplot(aes(
    x = initial_volume,
    y = width,
    col = food_regime,
    group = food_regime
  )) +
  geom_point() +
  geom_smooth(method = lm, se = F) +
  scale_color_viridis_d(option = "C", end = .9)

width ~ initial_volume * food_regime
linear_reg()

linear_reg() |> 
  set_engine("keras")

lm_mod <- 
  linear_reg() |> 
  set_engine("lm")

lm_fit <-  
  lm_mod |>
  fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit  

print(lm_fit, digits = 5)

lm_fit$fit |> summary()

lm_fit |> tidy()

lm_fit |> tidy(conf.int = T)

lm_fit |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 2, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()
  
new_points <- expand.grid(initial_volume = seq(5,45,5), 
                          food_regime = c("Initial", "Low", "High"))
  
# Prognoza średniej wartości
mean_pred <- predict(object = lm_fit, new_data = new_points)

# Prognoza przedizału ufności
conf_pred <- predict(object = lm_fit, new_data = new_points, type = "conf_int")

# Łączenie danych
lm_pred <- 
  new_points |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)

# WYkres danych

lm_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")  


prior_dist <- rstanarm::student_t(df = 1)

set.seed(123)

# Ustawiamy metodę estymacji za pomocą parsnip

bayes_mod <-
  linear_reg() |>
  set_engine(engine = "stan",
             prior_intercept = prior_dist,
             prior = prior_dist)

# Estymacja modelu

bayes_fit <- 
  bayes_mod |> 
  fit(width ~ initial_volume * food_regime, data = urchins)

bayes_fit$fit

bayes_fit |> print(digits = 4)

bayes_pred <- 
new_points |> 
  bind_cols(predict(bayes_fit, new_data = new_points)) |> 
  bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))

bayes_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")

ggplot(urchins,
       aes(initial_volume, width)) +      # returns a ggplot object 
  geom_jitter() +                         # same
  geom_smooth(method = lm, se = FALSE) +  # same                    
  labs(x = "Volume", y = "Width")         # etc
  
## Ćwiczenie 1

```{r}
library(tidyverse)    # do manipulacji danymi
library(GGally)       # do eksploracji danych

colnames(airquality) <- tolower(colnames(airquality)) # Zmieniamy nazwy kolumn na małe litery, by ułatwić pracę

air <- airquality |>
  as_tibble() |>        # konwersja na tibble
  na.omit() |>          # usunięcie wierszy z brakującymi danymi
  select(-day) |>       # usunięcie zmiennej 'day', nie będzie używana w modelu
  mutate(month = factor(month))  # przekształcenie zmiennej 'month' w zmienną kategorialną (czynnik)

air 

lm_mod1 <-  # ustawienie metody estymacji
  linear_reg() |> 
  set_engine("lm")

lm_fit1 <-  # Formuła R i estymacja
  lm_mod1 |>
  fit(ozone ~ solar.r * wind * temp * month, data = air)
lm_fit1

# Lepsza prezentacja i wykres 

print(lm_fit1, digits = 5)

lm_fit1$fit |> summary()

lm_fit1 |> tidy()

lm_fit1 |> tidy(conf.int = T) |> print(n=40)

lm_fit1 |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 0,5, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()

# Miesiące nie wpływają na o3 ponieważ przekraczają zero.

# Tworzenie siatki nowych punktów predykcyjnych 
new_points <- expand.grid(
  temp = seq(70, 90, by = 5),
  month = factor(c(5, 6, 7, 8, 9)),
  wind = median(air$wind),
  solar.r = median(air$solar.r)
)

# Konwersja do tibble
new_points <- as_tibble(new_points)

# Prognoza wartości średnich
mean_pred <- predict(lm_fit1, new_data = new_points)

# Prognoza przedziałów ufności
conf_pred <- predict(lm_fit1, new_data = new_points, type = "conf_int")

# Łączenie prognoz z danymi wejściowymi
lm_pred <- new_points |>
  bind_cols(mean_pred) |>
  bind_cols(conf_pred)

# Wykres: prognozowana wartość O3 wraz z przedziałami ufności
lm_pred |>
  ggplot(aes(x = month, y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ temp) +
  theme_bw() +
  labs(
    y = "Przewidywany poziom O₃",
    x = "Miesiąc",
    title = "Prognoza poziomu ozonu (O₃) względem temperatury i miesiąca"
  )
```
